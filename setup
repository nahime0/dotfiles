#!/usr/bin/env zsh

################################################################################
# Setup needed variables and env                                               #
#                                                                              #
# 1. The directory of the script                                               #
# 2. The path of the gum binary                                                #
#                                                                              #
# Then this script will take care of installing the needed fonts, and the      #
# needed software and tools.                                                   #
################################################################################

export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export GUM=$DIR/bin/pkgx/gum/gum

######################################################
# Import lib/oses.sh    Â                             #
# Import lib/shell.sh                                #
#                                                    #
# they contains the functions for detecting the OS   #
# and the current shell                              #
######################################################

source $DIR/lib/oses.sh
source $DIR/lib/shell.sh

#####################################
# Check if the current shell is ZSH #
#####################################
if ! isZsh; then
    echo ""
    echo "You need to be in ZSH to launch this script."
    echo "Install ZSH, then change shell:"
    echo ""
    echo ">  chsh -s \$(which zsh)"
    echo ""
    echo "You need to re-login afterwards."
    exit 1
fi

##############################################
# Check if the operating system is supported #
##############################################
if [ $OS = "other" ]; then
    echo ""
    echo "This script is only for macOS and Linux systems."
    echo ""
    exit 1
fi

##############################################
# Only on MacOS, install xcode command line  #
# and Homebrew                               #
##############################################
if [ $OS = "macos" ]; then
    $DIR/installers/xcode-command-line-tools.sh
    $DIR/installers/homebrew.sh
    $DIR/installers/fonts.sh
    $DIR/installers/kitty.sh
fi

##############################################
# Only on Linux, install make tools          #
##############################################
if [[ $OS = "linux" || $OS = "wsl" ]]; then
    echo ""
    echo "Installing make tools..."
    echo ""
    sudo apt update
    sudo apt install g++ gcc make
fi

################
# Install pkgx #
################
$DIR/installers/pkgx.sh

################################################################################
#                                                                              #
#         GUM is available, we can now start the installation process.         #
#                                                                              #
################################################################################

$GUM style --border normal --padding "0 4" --border-foreground 212 "All dependencies are installed."

if ! $GUM confirm "Continue with the installation?" ; then
    $GUM style --padding "0 2" "Installation aborted."
    exit 1
fi

$DIR/installers/folders.sh
$DIR/installers/oh-my-zsh.sh
$DIR/installers/dotfiles.sh
$DIR/installers/binaries.sh
$DIR/installers/pkgx-symlinks.sh

############################
# Other software and tools #
############################
$DIR/installers/ranger.sh

##################################################################
# If the private dotfiles repo exists, then run the setup script #
##################################################################
if [ -f $DIR/dotfiles-private/setup ] ; then
    $GUM style --padding "0 2" "Setting up private dotfiles..."
    $DIR/dotfiles-private/setup
fi
